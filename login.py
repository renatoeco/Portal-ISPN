import streamlit as st  
from pymongo import MongoClient  
import time 
import random  
import smtplib  
from email.mime.text import MIMEText  
from funcoes_auxiliares import conectar_mongo_portal_ispn  # Fun√ß√£o personalizada para conectar ao MongoDB


##############################################################################################################
# CONEX√ÉO COM O BANCO DE DADOS (MONGODB)
###############################################################################################################

# Conecta ao banco de dados MongoDB usando fun√ß√£o importada (com cache para otimizar desempenho)
db = conectar_mongo_portal_ispn()

# Define a cole√ß√£o a ser utilizada, neste caso chamada "teste"
colaboradores = db["pessoas"]



##############################################################################################################
# FUN√á√ïES AUXILIARES
##############################################################################################################

def encontrar_usuario_por_email(colaboradores, email_busca):
    usuario = colaboradores.find_one({"e‚Äëmail": email_busca})
    if usuario:
        return usuario.get("nome_completo"), usuario  # Retorna o nome e os dados do usu√°rio
    return None, None  # Caso n√£o encontre



# Fun√ß√£o para enviar um e-mail com c√≥digo de verifica√ß√£o
def enviar_email(destinatario, codigo):
    # Dados de autentica√ß√£o, retirados do arquivo secrets.toml
    remetente = st.secrets["senhas"]["endereco_email"]
    senha = st.secrets["senhas"]["senha_email"]

    # Conte√∫do do e-mail
    assunto = "C√≥digo Para Redefini√ß√£o de Senha - Portal ISPN"
    corpo = f"""
    <html>
        <body>
            <p style='font-size: 1.5em;'>
                Seu c√≥digo para redefini√ß√£o √©: <strong>{codigo}</strong>
            </p>
        </body>
    </html>
    """

    # Cria o e-mail formatado com HTML
    msg = MIMEText(corpo, "html", "utf-8")
    msg["Subject"] = assunto
    msg["From"] = remetente
    msg["To"] = destinatario

    # Tenta enviar o e-mail via SMTP seguro (SSL)
    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(remetente, senha)
            server.sendmail(remetente, destinatario, msg.as_string())
        return True
    except Exception as e:
        st.error(f"Erro ao enviar e-mail: {e}")
        return False


##############################################################################################################
# CAIXA DE DI√ÅLOGO PARA RECUPERA√á√ÉO DE SENHA
##############################################################################################################

@st.dialog("Recupera√ß√£o de Senha")
def recuperar_senha_dialog():
    # Inicializa vari√°veis de sess√£o usadas no fluxo
    st.session_state.setdefault("codigo_enviado", False)
    st.session_state.setdefault("codigo_verificacao", "")
    st.session_state.setdefault("email_verificado", "")
    st.session_state.setdefault("codigo_validado", False)

    conteudo_dialogo = st.empty()  # Container que ser√° atualizado conforme a etapa

    # --- Etapa 1: Solicita√ß√£o do e-mail ---
    if not st.session_state.codigo_enviado:
        with conteudo_dialogo.form(key="recover_password_form", border=False):
            email = st.text_input("Digite seu e-mail:")
            if st.form_submit_button("Confirmar"):
                if email:
                    nome, verificar_colaboradores = encontrar_usuario_por_email(colaboradores, email)
                    if verificar_colaboradores:
                        codigo = str(random.randint(100, 999))  # Gera um c√≥digo aleat√≥rio
                        if enviar_email(email, codigo):  # Envia o c√≥digo por e-mail
                            st.session_state.codigo_verificacao = codigo
                            st.session_state.codigo_enviado = True
                            st.session_state.email_verificado = email
                            st.success(f"C√≥digo enviado para {email}.")
                        else:
                            st.error("Erro ao enviar o e-mail. Tente novamente.")
                    else:
                        st.error("E-mail n√£o encontrado. Tente novamente.")
                else:
                    st.error("Por favor, insira um e-mail.")

    # --- Etapa 2: Verifica√ß√£o do c√≥digo recebido ---
    if st.session_state.codigo_enviado and not st.session_state.codigo_validado:
        with conteudo_dialogo.form(key="codigo_verificacao_form", border=False):
            st.subheader("C√≥digo de verifica√ß√£o")
            email_mask = st.session_state.email_verificado.replace("@", "‚Äã@")  # M√°scara leve no e-mail
            st.info(f"Um c√≥digo foi enviado para: **{email_mask}**")

            codigo_input = st.text_input("Informe o c√≥digo recebido por e-mail", placeholder="000")
            if st.form_submit_button("Verificar"):
                if codigo_input == st.session_state.codigo_verificacao:
                    sucesso = st.success("‚úÖ C√≥digo verificado com sucesso!")
                    time.sleep(2)
                    sucesso.empty()
                    st.session_state.codigo_validado = True
                else:
                    st.error("‚ùå C√≥digo inv√°lido. Tente novamente.")

    # --- Etapa 3: Defini√ß√£o da nova senha ---

    if st.session_state.codigo_validado:
        with conteudo_dialogo.form("nova_senha_form", border=True):
            st.markdown("### Defina sua nova senha")
            nova_senha = st.text_input("Nova senha", type="password")
            confirmar_senha = st.text_input("Confirme a senha", type="password")
            enviar_nova_senha = st.form_submit_button("Salvar")

            if enviar_nova_senha:
                if nova_senha == confirmar_senha and nova_senha.strip():
                    email = st.session_state.email_verificado

                    # Localiza o usu√°rio pelo e-mail
                    usuario = colaboradores.find_one({"e‚Äëmail": email})

                    if usuario:
                        try:
                            # Atualiza a senha no banco de dados
                            result = colaboradores.update_one(
                                {"e‚Äëmail": email},
                                {"$set": {"senha": nova_senha}}
                            )

                            if result.matched_count > 0:
                                st.success("Senha redefinida com sucesso!")

                                # Limpa as vari√°veis da sess√£o
                                for key in ["codigo_enviado", "codigo_verificacao", "email_verificado", "codigo_validado"]:
                                    st.session_state.pop(key, None)

                                # Marca usu√°rio como logado e reinicia o app
                                st.session_state.logged_in = True
                                time.sleep(2)
                                st.rerun()
                            else:
                                st.error("Erro ao redefinir a senha. Tente novamente.")
                        except Exception as e:
                            st.error(f"Erro ao atualizar a senha: {e}")
                    else:
                        st.error("Nenhum usu√°rio encontrado com esse e-mail.")
                else:
                    st.error("As senhas n√£o coincidem ou est√£o vazias.")



##############################################################################################################
# TELA DE LOGIN
##############################################################################################################

def login():
    # Exibe o logo
    st.markdown(
        """
        <div style="text-align: center;">
            <img src="https://ispn.org.br/site/wp-content/uploads/2021/04/logo_ISPN_2021.png" width="300"/>
        </div>
        """,
        unsafe_allow_html=True
    )
    st.write('')
    st.write('')
    st.write('')
    st.write('')

    # Exibe o t√≠tulo 
    st.markdown("<div style='text-align: center;'><h1 style='color: #666;'><strong>Portal do ISPN</strong></h1></div>", unsafe_allow_html=True)
    st.write('')
    st.write('')
    st.write('')
    st.write('')

    # Cria colunas para centralizar o formul√°rio
    col1, col2, col3 = st.columns([2, 3, 2])

    with col2.form("login_form", border=False):
    
        # Pede a senha
        password = st.text_input("Insira a senha", type="password")

        if st.form_submit_button("Entrar"):
            # Busca o documento correspondente √† senha
            usuario_encontrado = None
            # tipo_usuario = "desconhecido"

            for doc in colaboradores.find():
                if doc.get("senha") == password:
                    usuario_encontrado = doc
                    # tipo_usuario = doc.get("tipo de usu√°rio", "desconhecido")
                    # üî• Transforma string em lista removendo espa√ßos extras
                    tipo_usuario = [x.strip() for x in doc.get("tipo de usu√°rio", "").split(",")]

                    break

            # Se encontrou, loga o usu√°rio
            if usuario_encontrado:
                st.session_state["logged_in"] = True
                st.session_state["tipo_usuario"] = tipo_usuario
                st.session_state["nome"] = usuario_encontrado.get("nome_completo")
                st.session_state["cpf"] = usuario_encontrado.get("CPF")
                st.session_state["id_usuario"] = usuario_encontrado.get("_id")
                st.rerun()
            else:
                st.error("Senha inv√°lida ou usu√°rio n√£o encontrado!")    
    
    
    # Bot√£o para recuperar senha
    col2.button("Esqueci a senha", key="forgot_password", type="tertiary", on_click=recuperar_senha_dialog)

    # Informa√ß√£o adicional
    col2.markdown("<div style='color: red;'><br>√â o seu primeiro acesso?<br>Clique em \"Esqueci a senha\".</div>", unsafe_allow_html=True)


##############################################################################################################
# EXECU√á√ÉO PRINCIPAL: VERIFICA LOGIN E NAVEGA ENTRE P√ÅGINAS
##############################################################################################################



# Se o usu√°rio ainda n√£o estiver logado
if "logged_in" not in st.session_state or not st.session_state["logged_in"]:
    login()  # Mostra tela de login

else:


    # Mostra menu de navega√ß√£o se estiver logado
    pg = st.navigation([
        "Institucional.py", 
        "Estrat√©gia.py", 
        "Programas e √Åreas.py", 
        "Doadores.py", 
        "Projetos.py", 
        "Fundo Ecos.py", 
        "Indicadores.py", 
        "Pessoas.py", 
        "Viagens.py",
        "F√©rias e recessos.py",
        "Monitor de PLs.py",
        "Clipping de Not√≠cias.py", 
        "Manuais.py",
    ])

    # Executa a p√°gina selecionada
    pg.run()